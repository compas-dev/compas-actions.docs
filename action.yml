name: 'compas-actions.docs'
description: 'Build docs for COMPAS or its plugins'

inputs:
  dest:
    description: 'destination folder of built docs'
    required: true
    default: 'deploy'
  build_to_subfolder:
    description: 'whether to build documentation to a subfolder according to the commit type'
    required: true
    default: 'false'

outputs:
  commit_type:
    description: "The type of this commit: main, pull or tag"
    value: ${{ steps.docs.outputs.commit_type }}
  current_version:
    description: "The version number if the commit is tag"
    value: ${{ steps.docs.outputs.current_version }}
  subfolder:
    description: "The subfolder name where the docs are built to (if build_to_subfolder is set to true)"
    value: ${{ steps.docs.outputs.subfolder }}

runs:
  using: "composite"
  steps:
    - shell: bash
      run: |
        sudo apt-get install graphviz
        python -m pip install --upgrade pip
        python -m pip install cython --install-option="--no-cython-compile"
        python -m pip install --no-cache-dir -r requirements-dev.txt
  
    - shell: bash
      run: invoke docs

    - shell: bash
      id : docs
      run: |
        # Get branch/tag/latest name from git
        GITHUB_REF_REGEX="tags/v[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2}(rc[0-9]{1,2})?|(pull/[0-9]+)|heads/main"
        if [[ $GITHUB_REF =~ $GITHUB_REF_REGEX ]]; then
            if [[ $BASH_REMATCH = pull* ]]; then
                echo This is a pull request
                FOLDER_NAME=pull_${BASH_REMATCH##*/}
                echo "::set-output name=commit_type::pull"
            elif [[ $BASH_REMATCH = tags/* ]]; then
                echo This is a version tag
                FOLDER_NAME=${BASH_REMATCH##*/v}
                echo "::set-output name=commit_type::tag"
                echo "::set-output name=current_version::$FOLDER_NAME"
            else
                echo This is a commit to main branch
                FOLDER_NAME=latest
                echo "::set-output name=commit_type::main"
            fi;
        fi;

        if [[ ${{ inputs.build_to_subfolder }} == "true" ]]; then
          mkdir -p deploy/$FOLDER_NAME && mv -T dist/docs deploy/$FOLDER_NAME/
          echo "::set-output name=subfolder::$FOLDER_NAME"
          echo "Docs is built at ${{ inputs.dest }}/$FOLDER_NAME/"
        else
          mkdir -p ${{ inputs.dest }} && mv -T dist/docs ${{ inputs.dest }}
          echo "Docs is built at ${{ inputs.dest }}"
        fi;