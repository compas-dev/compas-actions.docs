name: 'compas-actions.docs'
description: 'Build docs for COMPAS or its plugins'

inputs:
  dest:
    description: 'destination folder of built docs'
    required: false
    default: 'deploy'
  build_to_subfolder:
    description: 'whether to build documentation to a subfolder according to the commit type'
    required: false
    default: 'true'
  test_docs:
    description: 'whether to test docstrings in this action.'
    required: false
    default: 'true'
  github_token:
    description: 'the github token for publishing docs'
    required: true
    default: ''
  python:
    description: "which python version to build docs with"
    required: false
    default: "3.10"
  use_conda:
    description: "whether to build docs with conda"
    required: false
    default: "false"

outputs:
  commit_type:
    description: "The type of this commit: main, pull or tag"
    value: ${{ steps.docs.outputs.commit_type }}
  current_version:
    description: "The version number if the commit is tag"
    value: ${{ steps.docs.outputs.current_version }}
  subfolder:
    description: "The subfolder name where the docs are built to (if build_to_subfolder is set to true)"
    value: ${{ steps.docs.outputs.subfolder }}

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3

    # Install graphvis if using linux
    - shell: bash -l {0}
      run: |
        if [[ ${{ runner.os }} == "Linux" ]]; then
          sudo apt-get install graphviz
        fi

    # Build package
    - uses: compas-dev/compas-actions.build@v2
      with:
        test: false
        use_conda: ${{ inputs.use_conda }}
        python: ${{ inputs.python }}

    # Test and generate docs
      shell: bash -l {0}
      run: |
        if [[ ${{ inputs.test_docs }} == "true" ]]; then
          invoke testdocs
        fi

        invoke docs

    # Detect commit type and docs to corresponding folder
    - shell: bash -l {0}
      id : docs
      run: |
        # Get branch/tag/latest name from git
        GITHUB_REF_REGEX="tags/v[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2}(rc[0-9]{1,2})?|(pull/[0-9]+)|heads/main"
        if [[ $GITHUB_REF =~ $GITHUB_REF_REGEX ]]; then
            if [[ $BASH_REMATCH = pull* ]]; then
                echo This is a pull request
                FOLDER_NAME=pull_${BASH_REMATCH##*/}
                echo "commit_type=pull" >> $GITHUB_OUTPUT
            elif [[ $BASH_REMATCH = tags/* ]]; then
                echo This is a version tag
                FOLDER_NAME=${BASH_REMATCH##*/v}
                echo "commit_type=tag" >> $GITHUB_OUTPUT
                echo "current_version=$FOLDER_NAME" >> $GITHUB_OUTPUT
            else
                echo This is a commit to main branch
                FOLDER_NAME=latest
                echo "commit_type=main" >> $GITHUB_OUTPUT

            fi;
        fi;

        if [[ ${{ inputs.build_to_subfolder }} == "true" ]]; then
          mkdir -p deploy/$FOLDER_NAME && mv -T dist/docs deploy/$FOLDER_NAME/
          echo "subfolder=$FOLDER_NAME" >> $GITHUB_OUTPUT
          echo "Docs is built at ${{ inputs.dest }}/$FOLDER_NAME/"
        else
          mkdir -p ${{ inputs.dest }} && mv -T dist/docs ${{ inputs.dest }}
          echo "Docs is built at ${{ inputs.dest }}"
        fi;

    # Check index.html and .nojekyll
    - shell: bash -l {0}
      run: |
        echo check index.html and .nojekyll
        cd ${{ inputs.dest }}
        if [[ ! -f ".nojekyll" ]]; then
          echo creating .nojekyll
          > .nojekyll
        fi

        full_repo=${{ github.repository }}
        repo=${full_repo#*/}

        if [[ ! -f "index.html" ]]; then
          echo creating index.html
          echo '<meta http-equiv="refresh" content="0; url=/'$repo'/latest/">' > index.html
        fi

        if [[ ${{ steps.docs.outputs.commit_type }} == "tag" ]]; then
          echo update index.html to point at ${{ steps.docs.outputs.current_version }}
          echo '<meta http-equiv="refresh" content="0; url=/'$repo'/${{ steps.docs.outputs.current_version }}/">' > index.html
        fi

    # Deploy docs to ghpage
    - name: Deploy docs
      if: success() && steps.docs.outputs.commit_type != 'pull'
      uses: crazy-max/ghaction-github-pages@v2
      with:
        target_branch: gh-pages
        build_dir: deploy
        keep_history: true
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      
    # Update docs version list
    - uses: compas-dev/compas-actions.docversions@v2
      if: success() && steps.docs.outputs.commit_type == 'tag'
      with:
        current_version: ${{ steps.docs.outputs.current_version }}
        github_token: ${{ inputs.github_token }}
